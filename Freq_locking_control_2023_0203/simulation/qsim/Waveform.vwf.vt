// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/01/2022 17:40:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          relay_feedback_osc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module relay_feedback_osc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg DOUT1;
reg DOUT2;
reg Iq;
reg SW;
reg Vq;
reg clk50MHz;
reg jumper_off;
// wires                                               
wire CS1;
wire CS2;
wire [7:0] D;
wire DIN1;
wire DIN2;
wire E;
wire Gate_An;
wire Gate_Ap;
wire Gate_Bn;
wire Gate_Bp;
wire [6:0] LED;
wire RS;
wire RW;
wire SCLK1;
wire SCLK2;
wire TX;
wire [19:0] TX_count_bit;
wire alarm;
wire alarm_low;
wire fault;
wire locked_low;
wire test_n;
wire test_p;

// assign statements (if any)                          
relay_feedback_osc i1 (
// port map - connection between master ports and signals/registers   
	.CS1(CS1),
	.CS2(CS2),
	.D(D),
	.DIN1(DIN1),
	.DIN2(DIN2),
	.DOUT1(DOUT1),
	.DOUT2(DOUT2),
	.E(E),
	.Gate_An(Gate_An),
	.Gate_Ap(Gate_Ap),
	.Gate_Bn(Gate_Bn),
	.Gate_Bp(Gate_Bp),
	.Iq(Iq),
	.LED(LED),
	.RS(RS),
	.RW(RW),
	.SCLK1(SCLK1),
	.SCLK2(SCLK2),
	.SW(SW),
	.TX(TX),
	.TX_count_bit(TX_count_bit),
	.Vq(Vq),
	.alarm(alarm),
	.alarm_low(alarm_low),
	.clk50MHz(clk50MHz),
	.fault(fault),
	.jumper_off(jumper_off),
	.locked_low(locked_low),
	.test_n(test_n),
	.test_p(test_p)
);
initial 
begin 
#1000000 $finish;
end 

// clk50MHz
always
begin
	clk50MHz = 1'b0;
	clk50MHz = #5000 1'b1;
	#5000;
end 
endmodule

